name: CI
on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches:
      - '**'
  schedule:
    - cron: '0 0 * * 0'
jobs:

  docker-build:
    name: Docker Build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Push to DockerHub
        uses: docker/build-push-action@v1
        with:
          push: true
          tags: GITHUB_ACTION_${{ github.run_number }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: mmore500/conduit
          add_git_labels: true


  tidy:
    name: Docs, Miscellaneous
    runs-on: ubuntu-20.04
    needs:
      - docker-build
    container:
      image: mmore500/conduit:GITHUB_ACTION_${{ github.run_number }}
      # github actions requires root to access mounted volumes
      options: --user root
    steps:
      - run: /opt/conduit/conduitpylib/test/run_tests.sh
      - run: |
          cd /opt/conduit
          ./ci/test_tidy.sh

  binder:
    name: Notebooks
    runs-on: ubuntu-20.04
    needs:
      - docker-build
    container:
      image: mmore500/conduit:GITHUB_ACTION_${{ github.run_number }}
      # github actions requires root to access mounted volumes
      options: --user root
    steps:
      # Adapted from https://askubuntu.com/a/524368
      - run: /opt/conduit/binder/execute_notebooks.sh
      - run: git init
      - uses: fregante/setup-git-user@v1
      - run: git commit --allow-empty -m "Initial commit"
      - run: cp -r /opt/conduit/ deploy/
      - uses: JamesIves/github-pages-deploy-action@4.0.0
        with:
          branch: binder # The branch the action should deploy to.
          folder: deploy # The folder the action should deploy.
      # adapted from https://unix.stackexchange.com/a/107647
      - run: mkdir -p deploy-artifacts/
      - run: find /opt/conduit/binder/ \( -name '*.csv' -o -name '*.png' -o -name '*.jpg' -o -name '*.pdf' -o -name '*.json' -o -name '*.meta' -o -name '*.txt' -o -name '*.out' \)  -exec cp --parents '{}' deploy-artifacts/ \;
      - uses: JamesIves/github-pages-deploy-action@4.0.0
        with:
          branch: binder-artifacts # The branch the action should deploy to.
          folder: deploy-artifacts # The folder the action should deploy.

  # unit:
  #   name: Unit Tests
  #   runs-on: ubuntu-20.04
  #   needs:
  #     - docker-build
  #   strategy:
  #     matrix:
  #       mpicxx: [mpich, openmpi]
  #       mode: [ Debug, Opt ]
  #     fail-fast: false
  #   container:
  #     image: mmore500/conduit:GITHUB_ACTION_${{ github.run_number }}
  #     # github actions requires root to access mounted volumes
  #     options: --cap-add=SYS_ADMIN
  #     env:
  #       DISH_MPICXX: mpicxx.${{ matrix.mpicxx }}
  #       OMPI_CXX: clang++
  #   steps:
  #     - run: |
  #         cd /opt/conduit/
  #         cmake -S . -B build -GNinja -DCMAKE_BUILD_TYPE=${{ matrix.mode }} -DMPI_EXECUTABLE_SUFFIX=.${{ matrix.mpicxx }}
  #         cmake --build build
  #         cd build
  #         ctest
  unit:
    name: Unit Tests
    runs-on: ubuntu-20.04
    needs:
      - docker-build
    strategy:
      matrix:
        mpicxx: [mpich, openmpi]
        mode: [ Debug, Opt ]
      fail-fast: false
    steps:
      - uses: docker-practice/actions-setup-docker@v1
      - run: >
          docker run "mmore500/conduit:GITHUB_ACTION_${{ github.run_number }}" /bin/bash -c
          "cd /opt/conduit/ &&
          cmake -S . -B build -GNinja -DCMAKE_BUILD_TYPE=${{ matrix.mode }} -DMPI_EXECUTABLE_SUFFIX=.${{ matrix.mpicxx }} &&
          cmake --build build &&
          cd build &&
          ctest"

  coverage:
    name: Coverage
    runs-on: ubuntu-20.04
    needs:
      - docker-build
    env:
      DISH_MPICXX: mpicxx.openmpi
      OMPI_CXX: clang++
    steps:
      - uses: docker-practice/actions-setup-docker@v1
      - run: export ci_env=`bash <(curl -s https://codecov.io/env)`
      - run: >
          docker run $ci_env -e DISH_MPICXX=$DISH_MPICXX -e OMPI_CXX=$OMPI_CXX -e CC=clang -e CXX=clang++
          "mmore500/conduit:GITHUB_ACTION_${{ github.run_number }}" /bin/bash -c
          "cd /opt/conduit/ &&
          cmake -S . -B build -GNinja -DCMAKE_BUILD_TYPE=Debug -DCODE_COVERAGE=ON
          && cmake --build build --target ccov-show-test-netuit
          && cmake --build build --target ccov-show-test-uit
          && cmake --build build --target ccov-show-test-uitsl
          && bash <(curl -s https://codecov.io/bash)"

  # TODO: figure out why codecov errors out
  # coverage:
  #   name: Coverage
  #   runs-on: ubuntu-20.04
  #   needs:
  #     - docker-build
  #   container:
  #     image: mmore500/conduit:GITHUB_ACTION_${{ github.run_number }}
  #     # github actions requires root to access mounted volumes
  #     options: --cap-add=SYS_ADMIN
  #     env:
  #       DISH_MPICXX: mpicxx.openmpi
  #       OMPI_CXX: clang++
  #       CC: clang
  #       CXX: clang++
  #   steps:
  #     - run: |
  #         cd /opt/conduit/
  #         cmake -S . -B build -GNinja -DCMAKE_BUILD_TYPE=Debug -DCODE_COVERAGE=ON
  #         cmake --build build --target ccov-show-test-netuit
  #         cmake --build build --target ccov-show-test-uit
  #         cmake --build build --target ccov-show-test-uitsl
  #     - uses: codecov/codecov-action@v1
  #       with:
  #         fail_ci_if_error: true
  #         verbose: true
  #         directory: /opt/conduit

  microbenchmarks:
    name: Microbenchmarks
    runs-on: ubuntu-20.04
    needs:
      - docker-build
    container:
      image: mmore500/conduit:GITHUB_ACTION_${{ github.run_number }}
      # github actions requires root to access mounted volumes
      options: --cap-add=SYS_ADMIN
      env:
        OSF_USERNAME: ${{ secrets.OSF_USERNAME }}
        OSF_PASSWORD: ${{ secrets.OSF_PASSWORD }}
        CONTEXT: actions
    steps:
      - run: |
          cd /opt/conduit/microbenchmarks
          make

  macrobenchmarks:
    name: Macrobenchmarks
    runs-on: ubuntu-20.04
    needs:
      - docker-build
    container:
      image: mmore500/conduit:GITHUB_ACTION_${{ github.run_number }}
      # github actions requires root to access mounted volumes
      options: --cap-add=SYS_ADMIN
      env:
        OSF_USERNAME: ${{ secrets.OSF_USERNAME }}
        OSF_PASSWORD: ${{ secrets.OSF_PASSWORD }}
        CONTEXT: actions
    steps:
      - run: |
          cd /opt/conduit/macrobenchmarks
          make

  docs:
    name: Source, Docs, Demos
    runs-on: ubuntu-20.04
    needs:
      - docker-build
    steps:
      - run: docker run --cap-add=SYS_ADMIN "mmore500/conduit:GITHUB_ACTION_${{ github.run_number }}" /bin/bash -c "cd /opt/conduit && make test-source && make docs && make demos"

  # TODO: figure out how to fix npm error
  # docs:
  #   name: Source, Docs, Demos
  #   runs-on: ubuntu-20.04
  #   needs:
  #     - docker-build
  #   container:
  #     image: mmore500/conduit:GITHUB_ACTION_${{ github.run_number }}
  #     # github actions requires root to access mounted volumes
  #     options: --cap-add=SYS_ADMIN
  #   steps:
  #     - run: |
  #         sudo chown -R 1000:1000 "/github/home/.npm"
  #         cd /opt/conduit
  #         make test-source
  #         make docs
  #         make demos

  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-20.04
    container:
      image: mmore500/conduit:GITHUB_ACTION_${{ github.run_number }}
      env:
        OSF_PASSWORD: ${{ secrets.OSF_PASSWORD }}
        OSF_USERNAME: ${{ secrets.OSF_USERNAME }}
      # github actions requires root to access mounted volumes
      options: --user root
    if: github.ref == 'refs/heads/master'
    needs:
      - docs
      - unit
      - coverage
      - tidy
      - macrobenchmarks
      - microbenchmarks
    steps:
      - run: make -C /opt/conduit/ web
      - run: cp -r /opt/conduit/web/ web/
      - uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages # The branch the action should deploy to.
          FOLDER: web # The folder the action should deploy.
          CLEAN: true # Automatically remove deleted files from the deploy branch

  deploy-dockerhub:
    name: Deploy to Dockerhub
    runs-on: ubuntu-20.04
    needs:
      - docs
      - unit
      - coverage
      - tidy
      - macrobenchmarks
      - microbenchmarks
      - binder
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Push to DockerHub
        uses: docker/build-push-action@v1
        with:
          push: true
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: mmore500/conduit
          tag_with_ref: true
          tag_with_sha: true
